# -*- coding: utf-8 -*-
"""bitcoin1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GrovHIcNlGfMkUGxf7ABQxlI8rLPUHdl
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot 
import keras #importing keras using tensorflow as backend

from sklearn.preprocessing import MinMaxScaler
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import mean_squared_error
from sklearn.model_selection  import  train_test_split

from keras.models import Sequential
from keras.layers import Dense
from keras.layers import LSTM

df=pd.read_csv('/content/drive/My Drive/bitcoin_ticker.csv')

df

df.head(5)

df.tail()

"""##  Data Preprocessing

### The value_counts() function is used to get a Series containing counts of unique values.rpt_key consists of different kinds of currencies
"""

df['rpt_key'].value_counts()

"""### Price in various currencies are given-Considering only USD"""

df= df.loc[(df['rpt_key']=='btc_usd')]

df

df.head()

"""### datetime_id to datatime"""

df1=df.reset_index(drop=True)['last']

df1

"""### Feature scaling (Scaling  last values between 0-1)"""

scaler=MinMaxScaler(feature_range=(0,1))
df1=scaler.fit_transform(np.array(df1).reshape(-1,1))

print(df1)

"""### Splitting  dataset into training and testing"""

##splitting dataset into train and test split
training_size=int(len(df1)*0.65)
test_size=len(df1)-training_size
train_data,test_data=df1[0:training_size,:],df1[training_size:len(df1),:1]

training_size,test_size

train_data

test_data

"""### Convert an array of values(numpy array) into a dataset Matrix"""

import numpy
def create_dataset(dataset, time_step=1):
    dataX, dataY = [], []
    for i in range(len(dataset)-time_step-1):
        a = dataset[i:(i+time_step), 0]   
        dataX.append(a)
        dataY.append(dataset[i + time_step, 0])
    return numpy.array(dataX), numpy.array(dataY)

# reshape 
time_step = 10
X_train, y_train = create_dataset(train_data, time_step)
X_test, ytest = create_dataset(test_data, time_step)

print(X_train.shape), print(y_train.shape)

y_train

X_train

print(X_test.shape), print(ytest.shape)

"""### Reshaping input to be [samples ,time steps, features] from [samples,features]"""

# reshape input to be [samples, time steps, features] which is required for LSTM
X_train =X_train.reshape(X_train.shape[0],X_train.shape[1] , 1)
X_test = X_test.reshape(X_test.shape[0],X_test.shape[1] , 1)

"""## Building the Model"""

model=Sequential()
model.add(LSTM(4,return_sequences=True,input_shape=(10,1)))
model.add(LSTM(4,return_sequences=True))
model.add(LSTM(4))
model.add(Dense(1))
model.compile(loss='mean_squared_error',optimizer='adam')

model.summary()

model.fit(X_train,y_train,validation_data=(X_test,ytest),epochs=100,batch_size=64,verbose=1)

"""### Predicting the data"""

### Lets Do the prediction and check performance metrics
train_predict=model.predict(X_train)
test_predict=model.predict(X_test)

"""### Transform to original form By Inversing as we had scaled earlier"""

X_train

train_predict

##Transformback to original form
train_predict=scaler.inverse_transform(train_predict)
test_predict=scaler.inverse_transform(test_predict)

train_predict

y_train

"""#### Calculate the RMSE performance matrix"""

### Calculate RMSE performance metrics
import math
from sklearn.metrics import mean_squared_error
math.sqrt(mean_squared_error(y_train,train_predict))

### Test Data RMSE
math.sqrt(mean_squared_error(ytest,test_predict))

len(test_data)

"""### Predict the output for future 30 days"""

x_input=test_data[43804:].reshape(1,-1)
x_input.shape

temp_input=list(x_input)
temp_input=temp_input[0].tolist()

temp_input

# demonstrate prediction for next 30 days
from numpy import array

lst_output=[]
n_steps=100
i=0
while(i<30):
    
    if(len(temp_input)>100):
        #print(temp_input)
        x_input=np.array(temp_input[1:])
        print("{} day input {}".format(i,x_input))
        x_input=x_input.reshape(1,-1)
        x_input = x_input.reshape((1, n_steps, 1))
        #print(x_input)
        yhat = model.predict_classes(x_input, verbose=0)
        print("{} day output {}".format(i,yhat))
        temp_input.extend(yhat[0].tolist())
        temp_input=temp_input[1:]
        #print(temp_input)
        lst_output.extend(yhat.tolist())
        i=i+1
    else:
        x_input = x_input.reshape((1, n_steps,1))
        yhat = model.predict_classes(x_input, verbose=0)
        print(yhat[0])
        temp_input.extend(yhat[0].tolist())
        print(len(temp_input))
        lst_output.extend(yhat.tolist())
        i=i+1
    

print(lst_output)

lst_output=scaler.inverse_transform(lst_output)

"""Price after 30 days"""

lst_output[-1]

